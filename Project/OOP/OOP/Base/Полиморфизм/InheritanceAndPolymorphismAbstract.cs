using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OOP.Base.Полиморфизм
{
    /// <summary>
    /// 1) Мы не можем создать объект абстрактного класса с использованием нового ключевого слова.
    /// 2) Класс может быть получен из абстрактного класса.
    /// 3) Класс, полученный из абстрактного класса, может создать объект.
    /// 4) Если мы объявляем какой-либо метод абстрактным в нашем абстрактном классе, то 
    ///     ответственный за производный класс обязан предоставить тело этого абстрактного метода, 
    ///     если тело не предусмотрено для этого абстрактного метода, мы не можем создать объект этого производного класса.
    /// 5) Когда мы переопределяем абстрактный метод из производного класса, 
    ///     мы не можем изменять параметры до него или тип возврата независимо от количества методов, 
    ///     объявленных как абстрактные в абстрактном классе.
    /// 6) Абстрактный класс означает, что класс является неполным и не может быть непосредственно использован. 
    ///     Абстрактный класс может использоваться только как базовый класс для других классов.
    /// 7) Если класс имеет хотя бы один абстрактный метод, то класс также должен быть объявлен абстрактным.
    /// 8) Абстрактный метод также не может использовать модификаторы, такие как статические или виртуальные.
    /// 9) Виртуальные методы работают медленнее, чем не виртуальные методы.
    /// 10) Абстрактный класс не может быть закрытым классом.
    /// 11) Абстрактный класс не может быть статическим классом.
    /// </summary>

    class InheritanceAndPolymorphismAbstract
    {
        public abstract class ClassA
        {
            public int a;
            public void XXX() { }
            public abstract void YYY();
        }

        class ClassB : ClassA
        {
            public override void YYY()
            {
            }
        }

        public InheritanceAndPolymorphismAbstract()
        {
            ClassB b = new ClassB();
            Console.ReadLine();
        }

    }
}
